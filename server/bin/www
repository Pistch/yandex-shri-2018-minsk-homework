#!/usr/bin/env node

/**
 * Module dependencies.
 */
const createError = require('http-errors');
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');

const debug = require('debug')('server:server');
const http = require('http');
const parseImages = require('../helpers/parsePictures');

/**
 * Get port from environment and store in Express.
 */
const app = express();
const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

parseImages()
  .then((pictures) => {
    app.use(logger('dev'));
    app.use(express.json());
    app.use(express.urlencoded({ extended: false }));
    app.use(cookieParser());

    app.set('views', path.join(__dirname, '../views'));
    app.set('view engine', 'jade');

    app.use(express.static(path.join(__dirname, '../../build')));
    app.use('/pictures', express.static(path.join(__dirname, '../../pictures')));
    app.use('/pictures-data', (req, res, next) => {
      const offset = req.query.offset ? parseInt(req.query.offset) : 0;
      const quantity = req.query.count ? parseInt(req.query.count) : pictures.length;
      const picsToSend = pictures.slice(offset, offset + quantity);
      console.log(picsToSend, offset, quantity);
      res.setHeader('Content-Type', 'application/json');
      res.end(JSON.stringify(picsToSend));
    });

    app.use(function(req, res, next) {
      next(createError(404));
    });

    app.use(function(err, req, res, next) {
      // set locals, only providing error in development
      res.locals.message = err.message;
      res.locals.error = req.app.get('env') === 'development' ? err : {};

      // render the error page
      res.status(err.status || 500);
      res.render('error');
    });

    const server = http.createServer(app);
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening(server));
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
  return function () {
    let addr = server.address();
    let bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  };
}
